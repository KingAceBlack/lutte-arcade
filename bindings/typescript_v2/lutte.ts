// Generated by dojo-bindgen on Mon, 3 Feb 2025 12:02:42 +0000. Do not modify this file manually.
import { Account } from "starknet";
import {
    Clause,
    Client,
    ModelClause,
    createClient,
    valueToToriiValueAndOperator,
} from "@dojoengine/torii-client";
import {
    LOCAL_KATANA,
    LOCAL_RELAY,
    LOCAL_TORII,
    createManifestFromJson,
} from "@dojoengine/core";

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
    data: string[];
    pending_word: string;
    pending_word_len: number;
}

// Type definition for `dojo::model::definition::ModelDef` struct
export interface ModelDef {
    name: string;
    layout: Layout;
    schema: Struct;
    packed_size: Option<number>;
    unpacked_size: Option<number>;
}

// Type definition for `dojo::meta::introspect::Struct` struct
export interface Struct {
    name: string;
    attrs: string[];
    children: Member[];
}

// Type definition for `dojo::meta::layout::FieldLayout` struct
export interface FieldLayout {
    selector: string;
    layout: Layout;
}

// Type definition for `dojo::meta::introspect::Enum` struct
export interface Enum {
    name: string;
    attrs: string[];
    children: [string, Ty][];
}

// Type definition for `dojo::meta::introspect::Member` struct
export interface Member {
    name: string;
    attrs: string[];
    ty: Ty;
}

// Type definition for `lutte::models::player::SessionDetail` struct
export interface SessionDetail {
    id: number;
    player: string;
}

// Type definition for `lutte::models::player::SessionDetailValue` struct
export interface SessionDetailValue {
    player: string;
}

// Type definition for `dojo::meta::introspect::Ty` enum
type Ty = { type: 'Primitive'; data: string; } | { type: 'Struct'; data: Struct; } | { type: 'Enum'; data: Enum; } | { type: 'Tuple'; data: Ty[]; } | { type: 'Array'; data: Ty[]; } | { type: 'ByteArray'; }
// Type definition for `core::option::Option::<core::integer::u32>` enum
type Option<A> = { type: 'Some'; data: A; } | { type: 'None'; }
// Type definition for `dojo::meta::layout::Layout` enum
type Layout = { type: 'Fixed'; data: number[]; } | { type: 'Struct'; data: FieldLayout[]; } | { type: 'Tuple'; data: Layout[]; } | { type: 'Array'; data: Layout[]; } | { type: 'ByteArray'; } | { type: 'Enum'; data: FieldLayout[]; }

// Type definition for `lutte::models::player::PlayableCharacterListValue` struct
export interface PlayableCharacterListValue {
    players: PlayableCharacter[];
}

// Type definition for `lutte::models::player::PlayableCharacterList` struct
export interface PlayableCharacterList {
    id: number;
    players: PlayableCharacter[];
}

// Type definition for `lutte::models::player::PlayableCharacter` struct
export interface PlayableCharacter {
    uid: number;
    skin: string;
    health: number;
    attack_power: number;
    special_attack: boolean;
    level: number;
    max_health: number;
}


// Type definition for `lutte::models::player::Player` struct
export interface Player {
    address: string;
    health: number;
    demeanor: number;
    attack_power: number;
    special_attack: boolean;
    current_enemy: UEnemy;
    skin_id: number;
    last_attack: boolean;
}

// Type definition for `lutte::models::player::PlayerValue` struct
export interface PlayerValue {
    health: number;
    demeanor: number;
    attack_power: number;
    special_attack: boolean;
    current_enemy: UEnemy;
    skin_id: number;
    last_attack: boolean;
}

// Type definition for `lutte::models::player::UEnemy` struct
export interface UEnemy {
    uid: number;
    health: number;
    attack_power: number;
    special_attack: boolean;
    level: number;
    skin: string;
}


// Type definition for `lutte::models::player::SessionValue` struct
export interface SessionValue {
    player: SessionDetail[];
}

// Type definition for `lutte::models::player::Session` struct
export interface Session {
    id: string;
    player: SessionDetail[];
}


// Type definition for `lutte::models::player::EnemiesListValue` struct
export interface EnemiesListValue {
    enemies: UEnemy[];
}

// Type definition for `lutte::models::player::EnemiesList` struct
export interface EnemiesList {
    id: number;
    enemies: UEnemy[];
}


// Type definition for `lutte::models::player::Enemy` struct
export interface Enemy {
    uid: number;
    health: number;
    attack_power: number;
    special_attack: boolean;
    level: number;
}

// Type definition for `lutte::models::player::EnemyValue` struct
export interface EnemyValue {
    health: number;
    attack_power: number;
    special_attack: boolean;
    level: number;
}


class BaseCalls {
    contractAddress: string;
    account?: Account;

    constructor(contractAddress: string, account?: Account) {
        this.account = account;
        this.contractAddress = contractAddress;
    }

    async execute(entrypoint: string, calldata: any[] = []): Promise<void> {
        if (!this.account) {
            throw new Error("No account set to interact with dojo_starter");
        }

        await this.account.execute(
            {
                contractAddress: this.contractAddress,
                entrypoint,
                calldata,
            },
            undefined,
            {
                maxFee: 0,
            }
        );
    }
}

class ActionsCalls extends BaseCalls {
    constructor(contractAddress: string, account?: Account) {
        super(contractAddress, account);
    }

    async dojoName(): Promise<void> {
        try {
            await this.execute("dojo_name", [])
        } catch (error) {
            console.error("Error executing dojoName:", error);
            throw error;
        }
    }

    async worldDispatcher(): Promise<void> {
        try {
            await this.execute("world_dispatcher", [])
        } catch (error) {
            console.error("Error executing worldDispatcher:", error);
            throw error;
        }
    }

    async upgrade(new_class_hash: string): Promise<void> {
        try {
            await this.execute("upgrade", [new_class_hash])
        } catch (error) {
            console.error("Error executing upgrade:", error);
            throw error;
        }
    }

    async offensivePhase(color: number): Promise<void> {
        try {
            await this.execute("offensive_phase", [color])
        } catch (error) {
            console.error("Error executing offensivePhase:", error);
            throw error;
        }
    }

    async fetchPlayableCharacters(): Promise<void> {
        try {
            await this.execute("fetch_playable_characters", [])
        } catch (error) {
            console.error("Error executing fetchPlayableCharacters:", error);
            throw error;
        }
    }

    async fetchEnemies(): Promise<void> {
        try {
            await this.execute("fetch_enemies", [])
        } catch (error) {
            console.error("Error executing fetchEnemies:", error);
            throw error;
        }
    }

    async defensivePhase(): Promise<void> {
        try {
            await this.execute("defensive_phase", [])
        } catch (error) {
            console.error("Error executing defensivePhase:", error);
            throw error;
        }
    }

    async getUser(player: string): Promise<void> {
        try {
            await this.execute("get_user", [player])
        } catch (error) {
            console.error("Error executing getUser:", error);
            throw error;
        }
    }

    async createFirstEnemy(skin: string, health: number, attack_power: number): Promise<void> {
        try {
            await this.execute("create_first_enemy", [props.skin.data,
                    props.skin.pending_word,
                    props.skin.pending_word_len,
                health,
                attack_power])
        } catch (error) {
            console.error("Error executing createFirstEnemy:", error);
            throw error;
        }
    }

    async createFirstCharacter(skin: string, health: number, attack_power: number): Promise<void> {
        try {
            await this.execute("create_first_character", [props.skin.data,
                    props.skin.pending_word,
                    props.skin.pending_word_len,
                health,
                attack_power])
        } catch (error) {
            console.error("Error executing createFirstCharacter:", error);
            throw error;
        }
    }

    async createCharacter(skin: string, health: number, attack_power: number, level: number): Promise<void> {
        try {
            await this.execute("create_character", [props.skin.data,
                    props.skin.pending_word,
                    props.skin.pending_word_len,
                health,
                attack_power,
                level])
        } catch (error) {
            console.error("Error executing createCharacter:", error);
            throw error;
        }
    }

    async createEnemy(skin: string, health: number, attack_power: number, level: number): Promise<void> {
        try {
            await this.execute("create_enemy", [props.skin.data,
                    props.skin.pending_word,
                    props.skin.pending_word_len,
                health,
                attack_power,
                level])
        } catch (error) {
            console.error("Error executing createEnemy:", error);
            throw error;
        }
    }

    async spawn(skin: number): Promise<void> {
        try {
            await this.execute("spawn", [skin])
        } catch (error) {
            console.error("Error executing spawn:", error);
            throw error;
        }
    }

    async specialAttack(): Promise<void> {
        try {
            await this.execute("special_attack", [])
        } catch (error) {
            console.error("Error executing specialAttack:", error);
            throw error;
        }
    }
}

type Query = Partial<{
    SessionDetail: ModelClause<SessionDetail>;
    PlayableCharacterList: ModelClause<PlayableCharacterList>;
    Player: ModelClause<Player>;
    Session: ModelClause<Session>;
    EnemiesList: ModelClause<EnemiesList>;
    Enemy: ModelClause<Enemy>;
}>;

type ResultMapping = {
    SessionDetail: SessionDetail;
    PlayableCharacterList: PlayableCharacterList;
    Player: Player;
    Session: Session;
    EnemiesList: EnemiesList;
    Enemy: Enemy;
};

type QueryResult<T extends Query> = {
    [K in keyof T]: K extends keyof ResultMapping ? ResultMapping[K] : never;
};

// Only supports a single model for now, since torii doesn't support multiple models
// And inside that single model, there's only support for a single query.
function convertQueryToToriiClause(query: Query): Clause | undefined {
    const [model, clause] = Object.entries(query)[0];

    if (Object.keys(clause).length === 0) {
        return undefined;
    }

    const clauses: Clause[] = Object.entries(clause).map(([key, value]) => {
        return {
            Member: {
                model,
                member: key,
                ...valueToToriiValueAndOperator(value),
            },
        } satisfies Clause;
    });

    return clauses[0];
}
type GeneralParams = {
    toriiUrl?: string;
    relayUrl?: string;
    account?: Account;
};

type InitialParams = GeneralParams &
    (
        | {
                rpcUrl?: string;
                worldAddress: string;
                actionsAddress: string;
            }
        | {
                manifest: any;
            }
    );

export class Lutte {
    rpcUrl: string;
    toriiUrl: string;
    toriiPromise: Promise<Client>;
    relayUrl: string;
    worldAddress: string;
    private _account?: Account;
    actions: ActionsCalls;
    actionsAddress: string;

    constructor(params: InitialParams) {
        if ("manifest" in params) {
            const config = createManifestFromJson(params.manifest);
            this.rpcUrl = config.world.metadata.rpc_url;
            this.worldAddress = config.world.address;

            const actionsAddress = config.contracts.find(
                (contract) =>
                    contract.name === "dojo_starter::systems::actions::actions"
            )?.address;

            if (!actionsAddress) {
                throw new Error("No actions contract found in the manifest");
            }

            this.actionsAddress = actionsAddress;
        } else {
            this.rpcUrl = params.rpcUrl || LOCAL_KATANA;
            this.worldAddress = params.worldAddress;
            this.actionsAddress = params.actionsAddress;
        }
        this.toriiUrl = params.toriiUrl || LOCAL_TORII;
        this.relayUrl = params.relayUrl || LOCAL_RELAY;
        this._account = params.account;
        this.actions = new ActionsCalls(this.actionsAddress, this._account);

        this.toriiPromise = createClient([], {
            rpcUrl: this.rpcUrl,
            toriiUrl: this.toriiUrl,
            worldAddress: this.worldAddress,
            relayUrl: this.relayUrl,
        });
    }

    get account(): Account | undefined {
        return this._account;
    }

    set account(account: Account) {
        this._account = account;
        this.actions = new ActionsCalls(this.actionsAddress, this._account);
    }

    async query<T extends Query>(query: T, limit = 10, offset = 0) {
        const torii = await this.toriiPromise;

        return {
            torii,
            findEntities: async () => this.findEntities(query, limit, offset),
        };
    }

    async findEntities<T extends Query>(query: T, limit = 10, offset = 0) {
        const torii = await this.toriiPromise;

        const clause = convertQueryToToriiClause(query);

        const toriiResult = await torii.getEntities({
            limit,
            offset,
            clause,
        });

        return toriiResult as Record<string, QueryResult<T>>;
    }

    async findEntity<T extends Query>(query: T) {
        const result = await this.findEntities(query, 1);

        if (Object.values(result).length === 0) {
            return undefined;
        }

        return Object.values(result)[0] as QueryResult<T>;
    }
}